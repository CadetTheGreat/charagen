{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["flrrnd","num","Math","floor","random","calctraitval","oldtraitval","traits_by_type","types","available_types","filter","traittype","Array","isArray","possibleVals","Set","x","y","add","possibleValsArray","from","has","oldidx","findIndex","rndidx","size","App","state","vals","rerollVal","index","oldval","trait","trait_val","traits","setState","generateCharacter","push","this","rows","map","key","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAMA,SAASA,EAAOC,GACb,OAAOC,KAAKC,MAAMF,EAAMC,KAAKE,UAGhC,IAAIC,EAAe,SAACC,EAAaC,GAA8B,IAAD,uBAAVC,EAAU,iCAAVA,EAAU,kBAE3D,IAF2D,EAEvDC,EAAkBD,EAAME,QAAO,SAAAC,GAAS,OAAIC,MAAMC,QAAQN,EAAeI,OACzEG,EAAe,IAAIC,IAHoC,cAK7CN,GAL6C,IAK3D,2BAA+B,CAAC,IAAD,EAAtBO,EAAsB,sBACdT,EAAeS,IADD,IAC5B,2BAAiC,CAAC,IAAzBC,EAAwB,QAC9BH,EAAaI,IAAID,IAFQ,gCAL4B,8BAW3D,IAAIE,EAAoBP,MAAMQ,KAAKN,GACnC,GAAIA,EAAaO,IAAIf,GAAc,CAChC,IAAIgB,EAASH,EAAkBI,WAAU,SAAAP,GAAC,OAAIA,IAAMV,KAChDkB,EAASxB,EAAOc,EAAaW,KAAK,GACtC,OAAON,EAAkBK,GAAUF,EAASE,EAAS,EAAIA,GAEzD,OAAOL,EAAkBnB,EAAOc,EAAaW,QAsEpCC,E,4MAjEZC,MAAQ,CACLC,KAAM,I,EAGTC,UAAY,SAACC,GACV,IAAIF,EAAI,YAAO,EAAKD,MAAMC,MACtBG,EAASH,EAAKE,GAElBF,EAAKE,GAAS,CACXE,MAAOD,EAAOC,MACdC,UAAW5B,EAAa0B,EAAOE,UAAWC,EAAOH,EAAOC,OAAQ,UAAW,UAG9E,EAAKG,SAAS,CACXP,U,EAINQ,kBAAoB,WACjB,IAAIR,EAAO,GACX,IAAK,IAAII,KAASE,EACfN,EAAKS,KAAK,CACPL,MAAOA,EACPC,UAAW5B,EAAa,GAAI6B,EAAOF,GAAQ,aAIjD,EAAKG,SAAS,CACXP,U,uDAIN,WACGU,KAAKF,sB,oBAGT,WAAU,IAAD,OACFG,EAAOD,KAAKX,MAAMC,KAAKY,KAAI,SAACC,EAAKX,GAAN,OAC5B,qBAAqBY,UAAU,WAA/B,SACG,sBAAKA,UAAU,YAAf,UACG,wBAAQA,UAAU,cAAcC,QAAS,kBAAM,EAAKd,UAAUC,IAA9D,qBACA,oBAAIY,UAAU,WAAd,SAAyB,8BAAID,EAAIT,MAAR,SACzB,qCAAQS,EAAIR,UAAZ,WAJIQ,EAAIT,UASnB,OAAO,qCACL,mCACE,0CACA,4BA9EO,WAgFV,sBAAKU,UAAU,MAAf,UACE,sBAAKA,UAAU,kBAAf,UACG,wBAAQC,QAASL,KAAKF,kBAAtB,sBAGA,0BAECG,Y,GA5DQK,IAAMC,WCnBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a62e8c6c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport traits from './traits.json';\n\nvar version = \"1.2\"\n\nfunction flrrnd(num) {\n   return Math.floor(num * Math.random())\n}\n\nvar calctraitval = (oldtraitval, traits_by_type, ...types) => {\n   // Only use types that exist and have at least 2 items, to avoid rerolling giving the same value as before.\n   let available_types = types.filter(traittype => Array.isArray(traits_by_type[traittype]))\n   let possibleVals = new Set()\n\n   for (let x of available_types) {\n      for (let y of traits_by_type[x]) {\n         possibleVals.add(y)\n      }\n   }\n\n   let possibleValsArray = Array.from(possibleVals)\n   if (possibleVals.has(oldtraitval)) {\n      let oldidx = possibleValsArray.findIndex(x => x === oldtraitval)\n      let rndidx = flrrnd(possibleVals.size-1)\n      return possibleValsArray[rndidx >= oldidx ? rndidx + 1 : rndidx]\n   } else {\n      return possibleValsArray[flrrnd(possibleVals.size)]\n   }\n}\n\nclass App extends React.Component {\n   state = {\n      vals: []\n   };\n\n   rerollVal = (index) => {\n      let vals = [...this.state.vals]\n      let oldval = vals[index]\n\n      vals[index] = {\n         trait: oldval.trait,\n         trait_val: calctraitval(oldval.trait_val, traits[oldval.trait], \"fantasy\", \"scifi\")\n      }\n\n      this.setState({\n         vals\n      });\n   }\n\n   generateCharacter = () => {\n      let vals = []\n      for (let trait in traits) {\n         vals.push({\n            trait: trait,\n            trait_val: calctraitval(\"\", traits[trait], \"fantasy\")\n         })\n      }\n\n      this.setState({\n         vals\n      });\n   }\n\n   componentDidMount() {\n      this.generateCharacter()\n   }\n\n  render() {\n     let rows = this.state.vals.map((key, index) =>\n        <div key={key.trait} className=\"char-row\">\n           <div className=\"char-desc\">\n              <button className=\"char-button\" onClick={() => this.rerollVal(index)}>Re-roll</button>\n              <h2 className=\"char-key\"><b>{key.trait}:</b></h2>\n              <span> {key.trait_val} </span>\n           </div>\n        </div>\n           )\n\n   return <>\n     <header>\n       <h1>Charagen</h1>\n       <p>{version}</p>\n     </header>\n    <div className=\"App\">\n      <div className=\"char-button-row\">\n         <button onClick={this.generateCharacter}>\n           Generate\n         </button>\n         <hr />\n      </div>\n         {rows}\n    </div>\n       </>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}