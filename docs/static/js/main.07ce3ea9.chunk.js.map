{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ALL_TYPES","flrrnd","num","Math","floor","random","calctraitval","oldtraitval","traits_by_type","available_types","types","length","Object","keys","filter","traittype","Array","isArray","possibleVals","Set","x","y","add","possibleValsArray","from","App","state","vals","rerollVal","index","oldval","trait","trait_val","traits","setState","generateCharacter","type","push","fetch","headers","Accept","then","response","json","buttons","map","key","onClick","charAt","toUpperCase","slice","rows","this","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAIIA,EAAY,CAAC,UAAW,QAAS,UAErC,SAASC,EAAOC,GACb,OAAOC,KAAKC,MAAMF,EAAMC,KAAKE,UAGhC,IAAIC,EAAe,SAACC,EAAaC,GAA6B,IAC3D,IAAIC,EAAkB,GADqC,mBAAVC,EAAU,iCAAVA,EAAU,kBAIxDD,EAFkB,IAAjBC,EAAMC,OAEWC,OAAOC,KAAKL,GAGZE,EAAMI,QAAO,SAAAC,GAAS,OAAIC,MAAMC,QAAQT,EAAeO,KAAeP,EAAeO,GAAWJ,OAAS,KAG9H,IAV2D,EAUvDO,EAAe,IAAIC,IAVoC,cAY7CV,GAZ6C,IAY3D,2BAA+B,CAAC,IAAD,EAAtBW,EAAsB,sBACdZ,EAAeY,IADD,IAC5B,2BAAiC,CAAC,IAAzBC,EAAwB,QAC1BA,IAAMd,GACPW,EAAaI,IAAID,IAHK,gCAZ4B,8BAoB3D,IAAIE,EAAoBP,MAAMQ,KAAKN,GACnC,OAAOK,EAAkBtB,EAAOsB,EAAkBZ,UAiFtCc,E,4MA7EZC,MAAQ,CACLC,KAAM,I,EAGTC,UAAY,SAACC,GACV,IAAIF,EAAI,YAAO,EAAKD,MAAMC,MACtBG,EAASH,EAAKE,GAElBF,EAAKE,GAAS,CACXE,MAAOD,EAAOC,MACdC,UAAW1B,EAAawB,EAAOE,UAAW,EAAKN,MAAMO,OAAOH,EAAOC,SAGtE,EAAKG,SAAS,CACXP,U,EAINQ,kBAAoB,SAACC,GAClB,IAAIT,EAAO,GACX,IAAK,IAAII,KAAS,EAAKL,MAAMO,OAC1BN,EAAKU,KAAK,CACPN,MAAOA,EACPC,UAAW1B,EAAa,GAAI,EAAKoB,MAAMO,OAAOF,GAAQK,KAI5D,EAAKF,SAAS,CACXP,U,uDAIN,WAAqB,IAAD,OACfW,MAAM,yFAA0F,CAC5FC,QAAS,CAAEC,OAAQ,cACnB,OAAU,QAEbC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAR,GACF,EAAKC,SAAS,CAACD,WACf,EAAKE,kBAAkBnC,EAAU,S,oBAIzC,WAAU,IAAD,OACD4C,EAAU5C,EAAU6C,KAAI,SAACC,GAAD,OACxB,yBAAkBC,QAAS,kBAAM,EAAKZ,kBAAkBW,IAAxD,sBACcA,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,KADzCJ,MAKbK,EAAOC,KAAK1B,MAAMC,KAAKkB,KAAI,SAACC,EAAKjB,GAAN,OAC3B,qBAAqBwB,UAAU,WAA/B,SACI,sBAAKA,UAAU,YAAf,UACI,wBAAQA,UAAU,cAAcN,QAAS,kBAAM,EAAKnB,UAAUC,IAA9D,qBACA,oBAAIwB,UAAU,WAAd,SAAyB,8BAAIP,EAAIf,MAAR,SACzB,qCAAQe,EAAId,UAAZ,WAJEc,EAAIf,UASlB,OAAO,qCACH,mCACI,0CACA,4BAhGF,WAkGF,sBAAKsB,UAAU,MAAf,UACI,sBAAKA,UAAU,kBAAf,UACKT,EACD,0BAEHO,Y,GAxECG,IAAMC,WCtBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.07ce3ea9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nvar VERSION = \"1.2\"\nvar ALL_TYPES = [\"fantasy\", \"scifi\", \"modern\"]\n\nfunction flrrnd(num) {\n   return Math.floor(num * Math.random())\n}\n\nvar calctraitval = (oldtraitval, traits_by_type, ...types) => {\n   let available_types = [];\n   if (types.length === 0) {\n      // If a type is not specified, assume all types are valid.\n      available_types = Object.keys(traits_by_type)\n   } else {\n       // Only use types that exist and have at least 2 items, to avoid rerolling giving the same value as before.\n      available_types = types.filter(traittype => Array.isArray(traits_by_type[traittype]) && traits_by_type[traittype].length > 1)\n   }\n\n   let possibleVals = new Set()\n\n   for (let x of available_types) {\n      for (let y of traits_by_type[x]) {\n         if (y !== oldtraitval) {\n            possibleVals.add(y)\n         }\n      }\n   }\n\n   let possibleValsArray = Array.from(possibleVals)\n   return possibleValsArray[flrrnd(possibleValsArray.length)]\n}\n\nclass App extends React.Component {\n   state = {\n      vals: []\n   };\n\n   rerollVal = (index) => {\n      let vals = [...this.state.vals]\n      let oldval = vals[index]\n\n      vals[index] = {\n         trait: oldval.trait,\n         trait_val: calctraitval(oldval.trait_val, this.state.traits[oldval.trait])\n      }\n\n      this.setState({\n         vals\n      });\n   }\n\n   generateCharacter = (type) => {\n      let vals = []\n      for (let trait in this.state.traits) {\n         vals.push({\n            trait: trait,\n            trait_val: calctraitval(\"\", this.state.traits[trait], type)\n         })\n      }\n\n      this.setState({\n         vals\n      });\n   }\n\n   componentDidMount() {\n        fetch(\"https://raw.githubusercontent.com/CadetTheGreat/charagen/main/frontend/src/traits.json\", {\n            headers: { Accept: \"text/plain\" },\n            \"method\": \"GET\"\n        })\n        .then(response => response.json())\n        .then(traits => {\n            this.setState({traits})\n            this.generateCharacter(ALL_TYPES[0])\n        })\n    }\n\n    render() {\n        let buttons = ALL_TYPES.map((key) =>\n            <button key={key} onClick={() => this.generateCharacter(key)}>\n                Generate {key.charAt(0).toUpperCase() + key.slice(1)}\n            </button>\n        )\n\n        let rows = this.state.vals.map((key, index) =>\n            <div key={key.trait} className=\"char-row\">\n                <div className=\"char-desc\">\n                    <button className=\"char-button\" onClick={() => this.rerollVal(index)}>Re-roll</button>\n                    <h2 className=\"char-key\"><b>{key.trait}:</b></h2>\n                    <span> {key.trait_val} </span>\n                </div>\n            </div>\n        )\n\n        return <>\n            <header>\n                <h1>Charagen</h1>\n                <p>{VERSION}</p>\n            </header>\n            <div className=\"App\">\n                <div className=\"char-button-row\">\n                    {buttons}\n                    <hr />\n                </div>\n                {rows}\n            </div>\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}