{"version":3,"sources":["Lists.js","App.js","serviceWorker.js","index.js"],"names":["races","classes","physical_traits","App","state","race","rank","trait","doSomething","Math","floor","length","random","setState","className","onClick","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAAIA,G,MAAQ,CACT,YACA,iBACA,SACA,SACA,WACA,QACA,SACA,OACA,SACA,OACA,UACA,WACA,QACA,YACA,gBACA,QACA,UACA,WACA,UACA,UACA,UACA,aACA,cACA,UACA,UACA,YACA,iBACA,UACA,OACA,8BACA,eACA,oBACA,YACA,aACA,YACA,UACA,uBACA,WACA,QACA,QACA,UACA,OACA,MACA,eACA,SACA,UACA,QACA,UACA,cACA,WACA,SACA,QACA,YACA,YACA,WACA,QACA,QACA,SACA,YACA,UACA,WACA,UACA,WACA,iBACA,cACA,WACA,aACA,aACA,YACA,WACA,WACA,YACA,WACA,aACA,aACA,YACA,QACA,WACA,UACA,gBACA,YACA,QACA,SACA,QACA,WACA,YACA,SACA,aACA,UACA,OACA,yBACA,OACA,UACA,QACA,SACA,WACA,WACA,WACA,gBACA,cACA,MACA,cACA,WACA,SACA,OACA,MACA,mBACA,QACA,UACA,UACA,WACA,WACA,WACA,SACA,QACA,UACA,UACA,UACA,aACA,QACA,cACA,WACA,YACA,UACA,eACA,QACA,QACA,QACA,QACA,aACA,SACA,cACA,aACA,2BACA,UACA,QACA,SACA,OACA,WACA,aACA,SACA,WACA,SACA,aACA,QACA,QACA,WACA,YACA,UACA,SACA,WACA,SACA,UACA,UACA,UACA,YACA,QACA,SACA,UACA,OACA,WAGCC,EAAU,CACX,sBACA,kBACA,eACA,UACA,kDACA,uCACA,oCACA,kCACA,6BACA,6BACA,mBACA,eACA,uBACA,uBACA,kBACA,qBACA,iBACA,oBACA,QACA,WACA,UACA,QACA,SACA,wCACA,sBACA,2BACA,gBACA,eACA,qBACA,gBACA,uBACA,qBACA,uBACA,iBACA,iBACA,OACA,eACA,OACA,SACA,OACA,WACA,YACA,UACA,uBACA,cAGCC,EAAkB,CACnB,QACA,QACA,YACA,2BACA,0BACA,0EACA,wBACA,iDACA,gDACA,gDACA,uCACA,4BACA,wEACA,+BACA,4CACA,+CACA,+BACA,2CACA,2CACA,+BACA,6BACA,wBACA,+BACA,8BACA,mCACA,eACA,iJCxMYC,E,2MAlCZC,MAAQ,CACLC,KAAM,GACNC,KAAM,GACNC,MAAO,I,EAGVC,YAAc,WACX,IAAIH,EAAOL,EAAMS,KAAKC,MAAMV,EAAMW,OAASF,KAAKG,WAC5CN,EAAOL,EAAQQ,KAAKC,MAAMT,EAAQU,OAASF,KAAKG,WAChDL,EAAQL,EAAgBO,KAAKC,MAAMR,EAAgBS,OAASF,KAAKG,WACvE,EAAKC,SAAS,CACXR,OACAC,OACAC,W,wEAKJ,OAAO,oCACN,wCACA,yBAAKO,UAAU,OACb,4BAAQC,QAASC,KAAKR,aAAtB,oBAGG,+BAAI,sCAAJ,IAAoBQ,KAAKZ,MAAMC,KAA/B,KACA,+BAAI,uCAAJ,IAAqBW,KAAKZ,MAAME,KAAhC,KACA,+BAAI,uCAAJ,IAAqBU,KAAKZ,MAAMG,MAAhC,W,GA3BSU,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.37df9b90.chunk.js","sourcesContent":["var races = [\n   \"Aarakocra\",\n   \"Aasimar / Deva\",\n   \"Alaghi\",\n   \"Armand\",\n   \"Asherati\",\n   \"Aurak\",\n   \"Aventi\",\n   \"Azer\",\n   \"Azurin\",\n   \"Baaz\",\n   \"Bariaur\",\n   \"Beastman\",\n   \"Bhuka\",\n   \"Bladeling\",\n   \"Blue (Goblin)\",\n   \"Bozak\",\n   \"Bugbear\",\n   \"Bullywug\",\n   \"Buomman\",\n   \"Catfolk\",\n   \"Centaur\",\n   \"Changeling\",\n   \"Chaos Gnome\",\n   \"Chitine\",\n   \"Crucian\",\n   \"Darfellan\",\n   \"Deep Imaskarri\",\n   \"Diopsid\",\n   \"Drow\",\n   \"Dire Wereboar (Lycanthrope)\",\n   \"Doppelganger\",\n   \"Draconic creature\",\n   \"Dracotaur\",\n   \"Dragonborn\",\n   \"Dragonkin\",\n   \"Dromite\",\n   \"Duergar / Gray Dwarf\",\n   \"Duskling\",\n   \"Dvati\",\n   \"Dwarf\",\n   \"Eladrin\",\n   \"Elan\",\n   \"Elf\",\n   \"Feral Gargun\",\n   \"Fey'ri\",\n   \"Firbolg\",\n   \"Flind\",\n   \"Fremlin\",\n   \"Frost Giant\",\n   \"Gargoyle\",\n   \"Genasi\",\n   \"Ghost\",\n   \"Githyanki\",\n   \"Githzerai\",\n   \"Gloaming\",\n   \"Gnoll\",\n   \"Gnome\",\n   \"Goblin\",\n   \"Goblinoid\",\n   \"Goliath\",\n   \"Grimlock\",\n   \"Hadozee\",\n   \"Hagspawn\",\n   \"Half-Celestial\",\n   \"Half-Dragon\",\n   \"Half-Elf\",\n   \"Half-Fiend\",\n   \"Half-Giant\",\n   \"Half-Ogre\",\n   \"Half-Orc\",\n   \"Halfling\",\n   \"Hamadryad\",\n   \"Hellbred\",\n   \"Hengeyokai\",\n   \"Hill Giant\",\n   \"Hobgoblin\",\n   \"Human\",\n   \"Illumian\",\n   \"Jaebrin\",\n   \"Janni (Genie)\",\n   \"Kalashtar\",\n   \"Kapak\",\n   \"Kender\",\n   \"Kenku\",\n   \"Killoren\",\n   \"Kir-Lanan\",\n   \"Kobold\",\n   \"Korobokuru\",\n   \"Kuo-toa\",\n   \"Lich\",\n   \"Lizardfolk / Lizardman\",\n   \"Loxo\",\n   \"Loxodon\",\n   \"Lupin\",\n   \"Maenad\",\n   \"Mephling\",\n   \"Illithid\",\n   \"Minotaur\",\n   \"Modron, Rogue\",\n   \"Mongrelfolk\",\n   \"Mul\",\n   \"Neanderthal\",\n   \"Neraphim\",\n   \"Nezumi\",\n   \"Ogre\",\n   \"Orc\",\n   \"Phrenic creature\",\n   \"Pixie\",\n   \"Pterran\",\n   \"Rakasta\",\n   \"Rakshasa\",\n   \"Raptoran\",\n   \"Revenant\",\n   \"Rilkan\",\n   \"Satyr\",\n   \"Saurial\",\n   \"Sea Elf\",\n   \"Sea Kin\",\n   \"Shadar-kai\",\n   \"Shade\",\n   \"Shadowswyft\",\n   \"Sharakim\",\n   \"Shardmind\",\n   \"Shifter\",\n   \"Simic Hybrid\",\n   \"Sivak\",\n   \"Skarn\",\n   \"Skulk\",\n   \"Slyth\",\n   \"Spellscale\",\n   \"Spiker\",\n   \"Spirit Folk\",\n   \"Stonechild\",\n   \"Svirfneblin / Deep Gnome\",\n   \"Swanmay\",\n   \"Synad\",\n   \"Tabaxi\",\n   \"Taer\",\n   \"Tanarukk\",\n   \"Thri-Kreen\",\n   \"Tibbit\",\n   \"Tiefling\",\n   \"Triton\",\n   \"Troglodyte\",\n   \"Troll\",\n   \"Uldra\",\n   \"Unbodied\",\n   \"Underfolk\",\n   \"Vampire\",\n   \"Vanara\",\n   \"Vedalken\",\n   \"Verdan\",\n   \"Voadkyn\",\n   \"Volodni\",\n   \"Vryloka\",\n   \"Warforged\",\n   \"Wemic\",\n   \"Wilden\",\n   \"Wildren\",\n   \"Xeph\",\n   \"Yuan-t\"\n]\n\nvar classes = [\n   \"Barbarian/Berserker\",\n   \"Knight/Cavalier\",\n   \"Swashbuckler\",\n   \"Paladin\",\n   \"Dark Knight/Blackguard/Antipaladin/Death Knight\",\n   \"Samurai/Yojimbo/Kensai/Weapon Master\",\n   \"Warlord:General/Tactician/Marshal\",\n   \"Inherent Gift Magician/Sorcerer\",\n   \"Theurgist Magician/Warlock\",\n   \"Summoner Magician/Conjurer\",\n   \"Vancian Magician\",\n   \"The Red Mage\",\n   \"Necromantic Magician\",\n   \"Illusionist Magician\",\n   \"Nature Magician\",\n   \"Elemental Magician\",\n   \"Druid Magician\",\n   \"Shamanic Magician\",\n   \"Thief\",\n   \"Assassin\",\n   \"Gambler\",\n   \"Ninja\",\n   \"Shadow\",\n   \"Pirate/Corsair/Privateer/Swashbuckler\",\n   \"Scout/The Operative\",\n   \"Priest/Healer/White Mage\",\n   \"Battle Priest\",\n   \"Witch Doctor\",\n   \"Templar/Inquisitor\",\n   \"Sniper Ranger\",\n   \"Bow and Blade Ranger\",\n   \"Beastmaster Ranger\",\n   \"Dual Wielding Ranger\",\n   \"Trapper Ranger\",\n   \"Magical Ranger\",\n   \"Hero\",\n   \"Magic Knight\",\n   \"Bard\",\n   \"Dancer\",\n   \"Monk\",\n   \"Engineer\",\n   \"Alchemist\",\n   \"Psychic\",\n   \"Mime/Mimic/Blue Mage\",\n   \"Gunslinger\"\n]\n\nvar physical_traits = [\n   \"Messy\",\n   \"Fancy\",\n   \"Dyed Hair\",\n   \"Unique eye or hair color\",\n   \"Extremely short or tall\",\n   \"Some discerning physical mark — birthmark, freckles, mole, or scar\",\n   \"Wears unusual glasses\",\n   \"Large feet — may mean they’re clumsy\",\n   \"Bites their nails/lips or chews on their hair\",\n   \"Constantly fidgeting and can’t sit still\",\n   \"Acne, eczema, or other skin problems\",\n   \"Many tattoos or piercings\",\n   \"Often sick or has allergies (constantly sniffling/blowing their nose)\",\n   \"Talks very loudly or quietly\",\n   \"Says everything like it’s a question\",\n   \"Gets sweaty easily (especially when nervous)\",\n   \"Unusually hairy arms or legs\",\n   \"Has a stutter or other speech impediment\",\n   \"Often tucks their hair behind their ears\",\n   \"Smokes and has a raspy voice\",\n   \"Breathes heavily or snores\",\n   \"Is extremely muscular\",\n   \"Walks very slowly or quickly\",\n   \"Left-handed or ambidextrous\",\n   \"Constantly scratching themselves\",\n   \"Has a twitch\",\n   \"Always wears a distinct item of clothing or accessory — a favorite pair of socks, a lucky jersey, or even a particular shade of lipstick\"\n]\n\nexport { physical_traits, classes, races };\n","import React from 'react';\nimport './App.css';\nimport { physical_traits, classes, races } from './Lists';\n\nclass App extends React.Component {\n   state = {\n      race: \"\",\n      rank: \"\",\n      trait: \"\"\n   };\n\n   doSomething = () => {\n      let race = races[Math.floor(races.length * Math.random())]\n      let rank = classes[Math.floor(classes.length * Math.random())]\n      let trait = physical_traits[Math.floor(physical_traits.length * Math.random())]\n    this.setState({\n       race,\n       rank,\n       trait\n    });\n   }\n\n  render() {\n   return <>\n    <h1>charagen</h1>\n    <div className=\"App\">\n      <button onClick={this.doSomething}>\n        Create Character\n      </button>\n         <p> <b> Race: </b> {this.state.race} </p>\n         <p> <b> Class: </b> {this.state.rank} </p>\n         <p> <b> Trait: </b> {this.state.trait} </p>\n    </div>\n       </>;\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}